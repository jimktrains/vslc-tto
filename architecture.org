* General Description

- 4 bit nibbles as processor word size
- 1 bit databus
- stack machine
  - stack is cleared on cycle start
  - code executes until a cycle start happens or the end of code memory is
    reached, in which case a new cycle is started
- When in reset, you can shift data into the code memory
- 8 input bits/registers mapped to pins
- 8 output bits/registers mapped to pins
- 1 error bit mapped to a pin (Not implemented yet)
- X bit data stack (let's see how big it can be made?) (32bits, currently)
- X nibble code memory (32 nibbles, currently)
- 1 16-bit timer/counter with clock divisor (not implemented yet)
- 1 main clock divisor (to take the system/instruction clock to a cycle
  clock) (not implemented yet)

* Opcodes
  ** Implemented

#+BEGIN_SRC
PUSH reg              0000 RRRR
POP  reg              0001 RRRR
SET  reg              0010 RRRR
RESET reg             0011 RRRR

NOT                   1000
AND                   1001
OR                    1010
XOR                   1011
IMPL                  1100
BIMP                  1101
NAND                  1110 May change this, but not a bad placeholder

NOP                   1111
#+END_SRC

** Not Implemented yet
#+BEGIN_SRC
PUSH reg              0000 RRRR
POP  reg              0001 1RRR
SET  reg              0010 1RRR
RESET reg             0011 1RRR
POP TIMER             0001 0XXX
SET TIMER             0010 0XXX
RESET TIMER           0011 0XXX

STACK SWAP            0011 1001
STACK ROL             0011 1011

p            0011
q            0101

           shift once
          shift twice
dup     1000 0011
over    1000 0101
drop    1010 0101

zero    1000 0000
one     1000 1111

not     1001 1100
overnot 1010 1010

and     1010 0001
nand    1010 1110
or      1010 0111
nor     1010 1000
xor     1010 0110
bicond  1010 1001
impl    1010 1101
nimpl   1010 0010
conv    1010 1011
nconv   1010 0100

rising  1111 0001
falling 1111 0010

NOP     1111 1111

SETUP TIMER PA period 0111 0000 PPPP PPPP PPPP PPPP P=period
SETUP TIMER PB period 0111 0001 PPPP PPPP PPPP PPPP P=period
SETUP TIMER M mode    0100 000M M=cycle/one-shot
SETUP TIMER CLOCKDIV  0101 DDDD D=log2(clock divisor)


#+END_SRC

* Instruction Cycle

  -
