.define segA o0
.define segB o1
.define segC o2
.define segD o3
.define segE o4
.define segF o5
.define segG o6
.define segDP o7

.define t0 s4
.define t1 s5
.define t2 s6
.define t3 s7

PUSH t0 ; t0
DUP ; t0 t0
FALLING i3 ; a0 t0 t0
DUP ; a0 a0 t0 t0
ROT ; t0 a0 a0 t0
XOR ; r0 a0 t0
ROT ; a0 t0 r0
AND ; c0 r0

DUP ; c0 c0 r0
PUSH t1 ; t1 c0 c0 r0
DUP ;  t1 t1 c0 c0 r0
ROT ; c0 t1 t1 c0 r0
XOR ; r1 t1 c0 r0
ROT ; t1 c0 r1 r0
AND ; c1 r1 r0

DUP 
PUSH t2
DUP 
ROT 
XOR 
ROT 
AND 

DUP 
PUSH t3
DUP 
ROT 
XOR 
ROT 
AND ; c3 r3 r2 r1 r0

; I can't seem to figure out how to do any of this without registers :(
DROP
POP t0
POP t1
POP t2
POP t3

;.logic (~t2 & ~t0) | (~t3 & t1) | (~t3 & t2 & t0) | (t3 & ~t2 & ~t1) | (t3 & ~t0) | (t2 & t1)
POP segA

.logic (~t3 & ~t1 & ~t0) | (~t3 & t1 & t0) | (~t2 & ~t0) | (t3 & ~t1 & t0) | (~t3 & ~t2)
POP segB

.logic (~t3 & t2) | (t3 & ~t2) | (~t1 & t0) | (~t2 & ~t1) | (~t2 & t0)
POP segC

.logic (t2 & ~t1 & t0) | (~t3 & ~t2 & ~t0) | (~t2 & t1 & t0) | (t3 & ~t1) | (t2 & t1 & ~t0)
POP segD

.logic (~t2 & ~t0) | (t1 & ~t0) | (t3 & t1) | (t3 & t2)
POP segE

.logic (~t1 & ~t0) | (~t3 & t2 & ~t1) | (t2 & ~t0) | (t3 & ~t2) | (t3 & t1)
POP segF
.logic (~t2 & t1) | (t3 & ~t2) | (~t3 & t2 & ~t1) | (t1 & ~t0) | (t3 & t0)
pop segG
